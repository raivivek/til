#! /usr/bin/env python3

""" Reads the files in current directory and creates a table-of-contents output to be
included in the README.md.
"""

__author__ = 'vivekrai'
__version__ = '1.0'

import os
import argparse
import sys
from collections import defaultdict
import operator


__ignore = ['.git', '.pyc', '._DS_Store', '.github']
__categories = {
        'misc': 'Miscellaneous',
        'python': 'Python (lang)',
        'R': 'R-lang',
        'unix': 'GNU Unix | Command line',
        'algorithms': 'Algorithms',
        'productivity': 'Productivity',
        'computing': 'Computing',
        'writing': 'Writing',
        'math': 'Statistics | Methods | Math',
        'biology': 'Biology',
        'lessons': 'Zen lessons',
        'unclassified': 'Unclassified'
        }


def scan_files(path):
    tree = defaultdict(list)
    for root, dirs, files in os.walk(path,  followlinks=True):
        root = os.path.basename(root)
        if root in __ignore or root.startswith('.'):  # ignore blacklist
            dirs[:], files[:] = [], []
        elif root == '' or root == os.path.basename(path):  # skip root
            continue
        else:
            tree[root] = files
    return tree


def get_title(filepath):
    with open(filepath, 'r') as f:
        title = f.readline()
    return title.strip('#').strip()


def get_permalink(title):
    fix_pipes = '--'.join([x.strip() for x in title.lower().split('|')])
    return '-'.join(fix_pipes.split(' '))


def write_entries(root, output, header, footer):
    files = scan_files(root)
    out = []

    out.append(header)
    out.append("**Count: {}**\n\n".format(sum([len(x) for x in files.values()])))

    # write short-toc
    out.append("## Table of Contents\n")
    for k, v in sorted(files.items(), key=operator.itemgetter(0)):
        if len(v) < 1: continue # skip entries with no notes
        cleaned_title = __categories[k]
        out.append("* [{}](#{})\n".format(cleaned_title,
                                          get_permalink(cleaned_title)))
    out.append("\n")


    # write full-toc
    for k, v in sorted(files.items(), key=operator.itemgetter(0)):
        if len(v) < 1: continue # skip entries with no notes
        out.append("### {}\n".format(__categories[k.strip('./')]))
        for file_ in v:
            path_ = os.path.join(k, file_)
            out.append("* [{}]({})\n".format(get_title(path_), path_))
        out.append("\n")

    # write footer
    out.append(footer)
    output = sys.stdout if not output else open(output, 'w')

    with output as f:
        f.writelines(out)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="""
    Prints a markdown listing of posts from the til directory to target file
    (default: stdout). You may use the output whicever way you like.""")

    parser.add_argument('-r', '--root',
                        help="Root directory to scan for files",
                        default='.')

    parser.add_argument('-o', '--output',
                        help="Output file (default: stdout)")

    args = parser.parse_args()

    with open(os.path.join(args.root, 'HEADER'), 'r') as f:
        __header__ = f.read()

    with open(os.path.join(args.root, 'FOOTER'), 'r') as f:
        __footer__ = f.read()

    write_entries(args.root, args.output, header=__header__, footer=__footer__)
